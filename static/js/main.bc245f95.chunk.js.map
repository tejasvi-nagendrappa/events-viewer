{"version":3,"sources":["components/ErrorBoundary/index.js","components/ErrorBoundary/ErrorBoundary.js","utils/AppConstants.js","utils/Helpers.js","components/EventListView/EventListView.js","services/ServiceRequest.js","services/service.js","components/App/AppActions.js","components/EmployeeList/EmployeeList.js","components/MessageList/MessageList.js","components/EventDetailView/EventDetailView.js","components/EventFilter/EventFilter.js","components/ListViewFooter/ListViewFooter.js","components/App/reducer.js","components/App/App.js","containers/AppContainer/AppContainer.js","reportWebVitals.js","index.js"],"names":["ErrorBoundary","state","hasError","error","info","this","setState","errorDetails","message","showIcon","description","type","props","children","Component","FETCH_EVENTS_SUCCESS","SHOW_EVENT_DETAIL","HIDE_EVENT_DETAIL","UPDATE_DATE_RANGE","ERROR_CODES_TEXT","422","401","404","padDigit","num","formatDateTime","isoDate","currentDate","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","amPm","formattedHour","EventListView","events","isModalView","isLoading","dispatch","useContext","AppDispatchContext","columns","title","dataIndex","key","render","name","onCell","record","onClick","payload","eventId","id","startDateTime","endDateTime","bordered","dataSource","pagination","loading","size","tip","rowKey","rowIndex","position","defaultProps","ServiceRequest","config","url","auth","btoa","USER_NAME","requestConfig","headers","Headers","Authorization","credentials","method","body","JSON","stringify","requestParams","apiUrl","baseUrl","buildApiUrl","Request","performFetch","a","serviceRequest","fetch","result","fetchData","handleResponse","response","contentType","get","includes","handleJSONResponse","Error","json","data","Promise","reject","statusCode","status","getEvents","queryParams","URLSearchParams","then","getEventDetail","EmployeeList","listOfEmployees","header","Title","level","itemLayout","renderItem","firstName","lastName","image","Item","Meta","avatar","src","MessageList","statusCodeReasons","genericErrorMsg","length","Text","map","text","initialState","eventDetails","employees","EventDetailView","useState","updateState","fetchEventDetail","detailsData","useEffect","onModalClose","visible","centered","onCancel","footer","shape","direction","startsAt","endsAt","pageSize","RangePicker","DatePicker","EventFilter","onFilterClick","filterState","updateFilter","className","onChange","dateRanges","start","end","startAsIso","toISOString","endAsIso","showTime","use12Hours","keyboard","min","value","disabled","ListViewFooter","onLoadMoreClick","isLastPage","footerText","strong","reducer","action","items","offset","count","appendEvents","currentPage","totalItemCount","addEventsToState","eventDetail","showDetails","showEventDetail","hideEventDetail","updateDateRange","Content","Layout","React","createContext","App","useReducer","appState","isEventFetchInProgress","updateEventFetchStatus","eventsInView","fetchListOfEvents","eventList","limit","ghost","backIcon","Provider","filterParams","AppContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+SAEeA,E,4MCGbC,MAAQ,CACNC,UAAU,EACVC,MAAO,KACPC,KAAM,M,uDAGR,SAAkBD,EAAOC,GACvBC,KAAKC,SAAS,CACZJ,UAAU,EACVC,QACAC,W,oBAIJ,WAAU,IAAD,EAC2BC,KAAKJ,MAA/BC,EADD,EACCA,SAAUC,EADX,EACWA,MAAOC,EADlB,EACkBA,KAGnBG,EAFQ,uBAAmBJ,GAED,KADlB,gBAAYC,GAE1B,OAAIF,EAEA,cAAC,IAAD,CACEM,QAAQ,oBACRC,UAAQ,EACRC,YAAaH,EACbI,KAAK,UAIJN,KAAKO,MAAMC,a,GA9BMC,a,yHCJfC,EAAuB,uBACvBC,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAoB,oBAEpBC,EAAmB,CAC9BC,IAAK,CACH,mCACA,iCACA,2BACA,6BAEFC,IAAK,CAAC,kBACNC,IAAK,CAAC,cCbFC,EAAW,SAAAC,GAAG,OAAKA,EAAM,GAAN,WAAeA,GAAQA,GAE1CC,EAAiB,SAAAC,GACrB,IAAMC,EAAc,IAAIC,KAAKF,GAEvBG,EAAOF,EAAYG,cACnBC,EAAQR,EAASI,EAAYK,WAAa,GAC1CC,EAAMV,EAASI,EAAYO,WAE3BC,EAAQR,EAAYS,WACpBC,EAAUd,EAASI,EAAYW,cAE/BC,EAAOJ,GAAS,GAAK,KAAO,KAC5BK,EAAgBjB,EAASY,EAAQ,GAAKA,EAAQ,GAAKA,GAEzD,MAAM,GAAN,OAAUF,EAAV,YAAiBF,EAAjB,YAA0BF,EAA1B,cAAoCW,EAApC,YAAqDH,EAArD,YAAgEE,ICY5DE,EAAgB,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UACtCC,EAAWC,qBAAWC,IACtBC,EAAU,CACd,CACEC,MAAO,WACPC,UAAW,WACXC,IAAK,WACLC,OAAQ,YAAe,IAAZC,EAAW,EAAXA,KACT,OACEV,EACIU,EACA,cAAC,IAAD,CAAQ1C,KAAK,OAAb,SAAqB0C,KAG7BC,OAAQ,SAACC,GACP,MAAO,CACLC,QAAS,WACPX,EAAS,CACPlC,KAAMK,EACNyC,QAAS,CAAEC,QAASH,EAAOI,UAMrC,CACEV,MAAO,YACPC,UAAW,WACXC,IAAK,WACLC,OAAQ,SAAAQ,GAAa,OAAInC,EAAemC,KAE1C,CACEX,MAAO,UACPC,UAAW,SACXC,IAAK,UACLC,OAAQ,SAAAS,GAAW,OAAIpC,EAAeoC,MAG1C,OACE,cAAC,IAAD,CACEC,SAAUnB,EACVK,QAASA,EACTe,WAAYrB,EACZsB,YAAY,EACZC,UAASrB,GAAY,CAACsB,KAAM,QAASC,IAAK,mBAC1CC,OAAQ,WAAkBC,GAAlB,IAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,SAAP,gBACHX,EADG,YACGW,EAASX,GADZ,YACkBW,EAASjB,KAD3B,YACmCgB,OAOjD5B,EAAc8B,aA1DO,CACnB5B,aAAa,EACbC,WAAW,GA0DEH,QCrET+B,EAAiB,SAACC,GACtB,IAAMC,EAAOD,GAAUA,EAAOC,KAAQ,GAChCC,EAAO,SAAWC,KAAKC,8CACvBC,EAAa,2BACdL,GADc,IAEjBM,QAAS,IAAIC,QAAQ,CACnBC,cAAeN,IAEjBO,YAAY,cACZC,OAASV,GAAUA,EAAOU,QAAW,MACrCC,KACEX,GACqB,QAAlBA,EAAOU,QACW,SAAlBV,EAAOU,QACPE,KAAKC,UAAUb,EAAOc,iBAIvBC,EA1BY,SAACd,GACnB,GAAIA,EAAK,CACP,IAAMe,EAAO,UAPC,4DAOD,YANO,QAOpB,MAAM,GAAN,OAAUA,GAAV,OAAoBf,GAEtB,OAAOA,EAqBQgB,CAAYhB,GAE3B,OADa,IAAIiB,QAAQH,EAAQV,IC9B7Bc,EAAY,uCAAG,WAAOnB,GAAP,iBAAAoB,EAAA,6DACbC,EAAiBtB,EAAeC,GADnB,SAEEsB,MAAMD,GAFR,cAEbE,EAFa,yBAGZA,GAHY,2CAAH,sDAMZC,EAAY,SAACxB,GACjB,OAAOmB,EAAanB,IAGhByB,EAAiB,SAACC,GACtB,IAAIC,EAAcD,EAASpB,QAAQsB,IAAI,gBACvC,GAAID,EAAYE,SAAS,oBACvB,OAAOC,EAAmBJ,GAE1B,MAAM,IAAIK,MAAJ,uBAA0BJ,EAA1B,oBAIJG,EAAkB,uCAAG,WAAOJ,GAAP,eAAAN,EAAA,+EAEJM,EAASM,OAFL,cAEjBC,EAFiB,yBAGhBA,GAHgB,yDAKhBC,QAAQC,OAAO,CACpBC,WAAYV,EAASW,OACrB3G,MAAK,QAPgB,yDAAH,sDCnBlB4G,EAAY,SAACC,GACjB,IAAItC,EAAM,UAIV,OAHIsC,IACFtC,EAAMA,EAAM,IAAM,IAAIuC,gBAAgBD,IAEjCf,EAAU,CACfvB,QACCwC,MAAK,SAAAR,GAAI,OAAIR,EAAeQ,OAG3BS,EAAiB,SAACxD,GACtB,OAAOsC,EAAU,CACfvB,IAAI,WAAD,OAAaf,KACfuD,MAAK,SAAAR,GAAI,OAAIR,EAAeQ,O,kBC6BlBU,EA7BM,SAAC,GAEf,IADLC,EACI,EADJA,gBAEA,OACE,cAAC,IAAD,CACEC,OACE,cAAC,IAAWC,MAAZ,CAAkBC,MAAO,EAAzB,+BAIFC,WAAW,aACX1D,WAAYsD,EACZjD,OAAQ,SAAAb,GAAM,OAAIA,EAAOI,IACzB+D,WAAY,gBACVC,EADU,EACVA,UAAWC,EADD,EACCA,SAAUC,EADX,EACWA,MAAOlE,EADlB,EACkBA,GADlB,OAGV,cAAC,IAAKmE,KAAN,UACE,cAAC,IAAKA,KAAKC,KAAX,CACEC,OAAQ,cAAC,IAAD,CAAQC,IAAKJ,IACrB5E,MAAK,UAAK0E,EAAL,YAAkBC,GACvBlH,YAAW,wBAAmBiD,WCJ3BuE,EAtBK,SAAC,GAAoB,IAAlBrB,EAAiB,EAAjBA,WACfsB,EAAoBhH,EAAiB0F,IAAe,GACpDuB,EAA+C,IAA7BD,EAAkBE,OACtC,4CACA,2CAcJ,MAAO,CAZL,cAAC,IAAWC,KAAZ,UACGF,GADkB,WAIHD,EAAkBI,KAAI,SAACC,GACzC,OACE,cAAC,IAAWF,KAAZ,qBACOE,EADP,wBAAiCA,SCLjCC,EAAe,CACnBvI,UAAU,EACV+D,SAAS,EACTyE,aAAc,CACZ/E,GAAI,KACJW,SAAU,GACVqE,UAAW,KAsGAC,EAlGS,SAAC,GAAiB,IAAflF,EAAc,EAAdA,QAAc,EACVmF,mBAASJ,GADC,mBAChCxI,EADgC,KACzB6I,EADyB,KAEjCjG,EAAWC,qBAAWC,IAEpBkB,EAAoChE,EAApCgE,QAASyE,EAA2BzI,EAA3ByI,aAAcxI,EAAaD,EAAbC,SAEzB6I,EAAgB,uCAAG,WAAOpF,GAAP,iBAAAkC,EAAA,+EAEKsB,EAAexD,GAFpB,OAEfqF,EAFe,OAGrBF,EAAY,CACV5I,UAAU,EACV+D,SAAS,EACTyE,aAAcM,IANK,gDAQZnC,EARY,KAQZA,WACTrG,IAAQL,MACN,cAAC,EAAD,CAAa0G,WAAYA,IACzB,GAEFiC,EAAY,CACV5I,UAAU,EACV+D,SAAS,EACTyE,aAAcD,EAAaC,eAhBR,yDAAH,sDAqBtBO,qBAAU,WACRF,EAAiBrF,KAChB,CAACA,IAEJ,IAAMwF,EAAe,WACnBrG,EAAS,CACPlC,KAAMM,KAIV,OACE,cAAC,IAAD,CACEkI,SAAO,EACPlG,MAAM,oBACNmG,UAAQ,EACRC,SAAUH,EACVI,OAAQ,CACN,cAAC,IAAD,CAEEC,MAAM,QACN5I,KAAK,UACL6C,QAAS0F,EAJX,kBACM,UAPV,SAgBGjF,EACG,cAAC,IAAD,IAEA,qCACE,cAAC,IAAD,CACEuF,UAAU,WACVtF,KAAK,WAGJhE,GACD,cAAC,EAAD,CACEyC,aAAW,EACXD,OAAQ,CAACgG,KAGb,cAAC,IAAD,CACEc,UAAU,WACVtF,KAAK,UAEP,cAAC,IAAD,CACEsF,UAAU,WACVtF,KAAK,WAGJhE,GACD,cAAC,EAAD,CACEmH,gBAAiBqB,EAAaC,UAC9B1E,QAASA,IAIX/D,GACA,cAAC,IAAWoI,KAAZ,CAAiB3H,KAAK,SAAtB,6D,kBCvGR8H,G,OAAe,CACnBgB,SAAU,KACVC,OAAQ,KACRC,SAAU,KAGJC,EAAgBC,IAAhBD,YAuEOE,GArEK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLlB,mBAASJ,GADJ,mBAClCuB,EADkC,KACrBC,EADqB,KAGjCR,EAA+BO,EAA/BP,SAAUC,EAAqBM,EAArBN,OAAQC,EAAaK,EAAbL,SA2B1B,OACE,qBAAKO,UAAU,cAAf,SACE,eAAC,IAAD,CAAOV,UAAU,aAAatF,KAAK,QAAnC,UACA,8BACE,eAAC,IAAD,CAAOsF,UAAU,aAAatF,KAAK,SAAnC,UACE,+CACA,cAAC0F,EAAD,CACEO,SAhCY,SAACC,GAAgB,IAAD,cACfA,EADe,GAC7BC,EAD6B,KACtBC,EADsB,KAE9BC,EAAaF,EAAMG,cACnBC,EAAWH,EAAIE,cAErBP,EAAa,2BACRD,GADO,IAEVP,SAAUc,EACVb,OAAQe,MAyBFC,SAAU,CAAEC,YAAY,UAI9B,8BACE,eAAC,IAAD,CAAOnB,UAAU,aAAatF,KAAK,SAAnC,UACE,8CACA,cAAC,IAAD,CACE0G,UAAU,EACVC,IAAK,EACLC,MAAOnB,EACPQ,SAhCe,SAACjG,GACpBA,GACF+F,EAAa,2BACRD,GADO,IAEVL,SAAUzF,aAgCZ,8BACE,cAAC,IAAD,CACEvD,KAAK,UACL4I,MAAM,QACN/F,QA/BiB,WACvBuG,EAAcC,IA+BRe,WAAYtB,GAAYC,GAJ1B,mCCzCOsB,I,OAnBQ,SAAC,GAAD,IACrBC,EADqB,EACrBA,gBAAiBC,EADI,EACJA,WAAYC,EADR,EACQA,WADR,OAGrB,sBAAKjB,UAAU,iBAAf,UACE,cAAC,IAAD,CACEX,MAAM,QACN5I,KAAK,UACL6C,QAASyH,EACTF,SAAUG,EAJZ,uBAQA,qBAAKhB,UAAU,8BAAf,SACE,cAAC,IAAW5B,KAAZ,CAAiB8C,QAAM,EAAvB,SAAyBD,W,UC8ChBE,GAhBC,SAACpL,EAAOqL,GAAY,IAC1B3K,EAAkB2K,EAAlB3K,KAAM8C,EAAY6H,EAAZ7H,QACd,OAAO9C,GACL,KAAKI,EACH,OAnDmB,SAACd,EAAOwD,GAAa,IAAD,EASvCA,EAPFiD,KAFyC,IAGvC6E,aAHuC,MAG/B,GAH+B,MAIvCvH,WACEwH,EALqC,EAKrCA,OAAQC,EAL6B,EAK7BA,MAGZC,EACEjI,EADFiI,aAEMhJ,EAAWzC,EAAXyC,OACR,OAAO,2BACFzC,GADL,IAEEyC,OAAQgJ,EAAY,uBAAOhJ,GAAP,aAAkB6I,IAASA,EAC/CI,YAAaH,EAAS,EACtBI,eAAgBH,IAoCPI,CAAiB5L,EAAOwD,GACjC,KAAKzC,EACH,OAlCkB,SAACf,EAAOwD,GAAa,IACnCC,EAAYD,EAAZC,QACR,OAAO,2BACFzD,GADL,IAEE6L,YAAa,CACXpI,UACAqI,aAAa,KA4BNC,CAAgB/L,EAAOwD,GAChC,KAAKxC,EACH,OAzBkB,SAAChB,GACvB,OAAO,2BACFA,GADL,IAEE6L,YAAa,CACXC,aAAa,KAqBNE,CAAgBhM,GACzB,KAAKiB,EACH,OAlBkB,SAACjB,EAAOwD,GAAa,IACnCiD,EAASjD,EAATiD,KACR,OAAO,2BACFzG,GACAyG,GAcMwF,CAAgBjM,EAAOwD,GAChC,QACE,OAAOxD,IClDLkM,I,OAAYC,IAAZD,SAEF1D,GAAe,CACnBqD,YAAa,CACXC,aAAa,EACbrI,QAAS,MAEXhB,OAAQ,GACRiJ,YAAa,EACbhC,SAAU,GACViC,eAAgB,GAChBnC,SAAU,KACVC,OAAQ,MAGJ3G,GAAqBsJ,IAAMC,cAAc,MAEzCC,GAAM,WAAO,IAAD,EACaC,qBAAWnB,GAAS5C,IADjC,mBACTgE,EADS,KACC5J,EADD,OAEyCgG,oBAAS,GAFlD,mBAET6D,EAFS,KAEeC,EAFf,KAIdjK,EAME+J,EANF/J,OAJc,EAUZ+J,EALFX,YAAeC,EALD,EAKCA,YAAarI,EALd,EAKcA,QAC5BiG,EAIE8C,EAJF9C,SACAgC,EAGEc,EAHFd,YACAlC,EAEEgD,EAFFhD,SACAC,EACE+C,EADF/C,OAGIkD,EAAelK,EAAO2F,OAEtBwE,EAAiB,uCAAG,WAAO7F,GAAP,+BAAAnB,EAAA,6DAAoB6F,EAApB,yCAEtBiB,GAAuB,GAFD,SAGE5F,EAAUC,GAHZ,OAGhB8F,EAHgB,OAItBjK,EAAS,CACPlC,KAAMI,EACN0C,QAAS,CACPiI,eACAhF,KAAMoG,KARY,gDAWbjG,EAXa,KAWbA,WACTrG,IAAQL,MACN,cAAC,EAAD,CAAa0G,WAAYA,IACzB,GAdoB,yBAiBtB8F,GAAuB,GAjBD,4EAAH,sDAqBvB1D,qBAAU,WACR,IAAIjC,EAAc,CAChB+F,MAAOpD,GAGLF,GAAYC,IACd1C,EAAW,2BAAQA,GAAR,IAAqByC,WAAUC,YAG5CmD,EAAkB7F,KACjB,CAACyC,EAAUC,EAAQC,IAEtB,IAyBMwB,EAAU,kBAAcyB,EAAd,WAEhB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CACE1C,UAAU,kBACVjH,MAAM,eACN+J,OAAO,EACPC,UAAU,IAEZ,cAAClK,GAAmBmK,SAApB,CAA6BpC,MAAOjI,EAApC,SACE,eAACsJ,GAAD,WAEIJ,EAAc,cAAC,EAAD,CAAiBrI,QAASA,IAAc,KAExD,cAAC,GAAD,CACEqG,cA7BY,SAACoD,GAEnBA,EAAa1D,WAAaA,GACvB0D,EAAazD,SAAWA,GACxByD,EAAaxD,WAAaA,GAE7B9G,EAAS,CACPlC,KAAMO,EACNuC,QAAS,CAAEiD,KAAMyG,QAuBf,cAAC,EAAD,CACEzK,OAAQA,EACRE,UAAW8J,IAGXA,GAA2C,IAAjBE,EACtB,KAEA,cAAC,GAAD,CACEzB,WAAYA,EACZF,gBArDQ,WACtB,IAAIjE,EAAc,CAChB+F,MAAOpD,EACP6B,OAAQG,GAENlC,GAAYC,IACd1C,EAAW,2BAAQA,GAAR,IAAqByC,WAAUC,YAG5CmD,EAAkB7F,GAAa,eC5EpBoG,GAVM,WACnB,OACE,qBAAKlD,UAAU,eAAf,SACE,cAAC,EAAD,UACE,cAAC,GAAD,SCKOmD,I,OAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrG,MAAK,YAAkD,IAA/CsG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASzK,OACP,cAAC,IAAM0K,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BX,O","file":"static/js/main.bc245f95.chunk.js","sourcesContent":["import ErrorBoundary from './ErrorBoundary';\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from 'antd';\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n    error: null,\n    info: null\n  };\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true,\n      error,\n      info\n    });\n  }\n\n  render() {\n    const { hasError, error, info } = this.state;\n    const descText = `Description: ${error}`;\n    const infoText = `Info: ${info}`;\n    const errorDetails = descText + '\\n' + infoText;\n    if (hasError) {\n      return (\n        <Alert\n          message=\"Error has occured\"\n          showIcon\n          description={errorDetails}\n          type=\"error\"\n        />\n      );\n    }\n    return this.props.children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ])\n};\n\nexport default ErrorBoundary;\n","export const FETCH_EVENTS_SUCCESS = 'FETCH_EVENTS_SUCCESS';\nexport const SHOW_EVENT_DETAIL = 'SHOW_EVENT_DETAIL';\nexport const HIDE_EVENT_DETAIL = 'HIDE_EVENT_DETAIL';\nexport const UPDATE_DATE_RANGE = 'UPDATE_DATE_RANGE';\n\nexport const ERROR_CODES_TEXT = {\n  422: [\n    '1. Starts at is not a valid date',\n    '2. Ends at is not a valid date',\n    '3. Limit is out of range',\n    '4. Offset is out of range'\n  ],\n  401: ['Not Authorized'],\n  404: ['Not Found']\n}\n","const padDigit = num => (num < 10 ? `0${num}` : num);\n\nconst formatDateTime = isoDate => {\n  const currentDate = new Date(isoDate);\n\n  const year = currentDate.getFullYear();\n  const month = padDigit(currentDate.getMonth() + 1);\n  const day = padDigit(currentDate.getDate());\n\n  const hours = currentDate.getHours();\n  const minutes = padDigit(currentDate.getMinutes());\n\n  const amPm = hours >= 12 ? 'PM' : 'AM';\n  const formattedHour = padDigit(hours > 12 ? hours - 12 : hours);\n\n  return `${day}/${month}/${year} , ${formattedHour}:${minutes} ${amPm}`;\n};\n\nexport { formatDateTime };\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Button } from 'antd';\nimport { AppDispatchContext } from '../App';\nimport { SHOW_EVENT_DETAIL } from '../../utils/AppConstants';\nimport { formatDateTime } from '../../utils/Helpers';\n\nconst propTypes = {\n  isModalView: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  events: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    position: PropTypes.shape({\n      name: PropTypes.string,\n      color: PropTypes.string,\n      id: PropTypes.number\n    }),\n    startsAt: PropTypes.string,\n    endsAt: PropTypes.string\n  })),\n};\n\nconst defaultProps = {\n  isModalView: false,\n  isLoading: false,\n};\n\nconst EventListView = ({ events, isModalView, isLoading }) => {\n  const dispatch = useContext(AppDispatchContext);\n  const columns = [\n    {\n      title: 'Position',\n      dataIndex: 'position',\n      key: 'position',\n      render: ({ name }) => {\n        return (\n          isModalView\n            ? name\n            : <Button type=\"link\">{name}</Button>\n        );\n      },\n      onCell: (record) => {\n        return {\n          onClick: () => {\n            dispatch({\n              type: SHOW_EVENT_DETAIL,\n              payload: { eventId: record.id }\n            })\n          },\n        };\n      }\n    },\n    {\n      title: 'Starts At',\n      dataIndex: 'startsAt',\n      key: 'startsAt',\n      render: startDateTime => formatDateTime(startDateTime)\n    },\n    {\n      title: 'Ends At',\n      dataIndex: 'endsAt',\n      key: 'endTime',\n      render: endDateTime => formatDateTime(endDateTime),\n    },\n  ];\n  return (\n    <Table\n      bordered={isModalView}\n      columns={columns}\n      dataSource={events}\n      pagination={false}\n      loading={isLoading ? {size: 'large', tip: 'Fetching Events'}: false}\n      rowKey={({ id, position}, rowIndex ) =>\n        `${id}-${position.id}-${position.name}-${rowIndex}`\n      }\n    />\n  )\n}\n\nEventListView.propTypes = propTypes;\nEventListView.defaultProps = defaultProps;\n\nexport default EventListView;\n","const END_POINT = 'https://fyx8bq1lpa.execute-api.eu-central-1.amazonaws.com';\nconst SERVER_ENV_TYPE = 'Prod';\nconst USER_NAME = 'frontend@shyftplan.com';\nconst PASSWORD = 'api_test_auth_token';\n\nconst buildApiUrl = (url) => {\n  if (url) {\n    const baseUrl = `${END_POINT}/${SERVER_ENV_TYPE}`;\n    return `${baseUrl}${url}`;\n  }\n  return url;\n}\n\nconst ServiceRequest = (config) =>  {\n  const url = (config && config.url) || '';\n  const auth = 'Basic ' + btoa(USER_NAME + \":\" + PASSWORD);\n  const requestConfig = {\n    ...config,\n    headers: new Headers({\n      Authorization: auth,\n    }),\n    credentials:'same-origin',\n    method: (config && config.method) || 'GET',\n    body:\n      config\n      && config.method !== 'GET'\n      && config.method !== 'HEAD'\n      && JSON.stringify(config.requestParams),\n\n  };\n\n  const apiUrl = buildApiUrl(url, requestConfig);\n  const req =  new Request(apiUrl, requestConfig);\n  return req;\n}\n\nexport { ServiceRequest as default };\n","import ServiceRequest from './ServiceRequest';\n\nconst performFetch = async (config) => {\n  const serviceRequest = ServiceRequest(config);\n  const result = await fetch(serviceRequest);\n  return result;\n}\n\nconst fetchData = (config) => {\n  return performFetch(config);\n}\n\nconst handleResponse = (response) => {\n  let contentType = response.headers.get('content-type')\n  if (contentType.includes('application/json')) {\n    return handleJSONResponse(response)\n  } else {\n    throw new Error(`Content-type ${contentType} not supported`)\n  }\n}\n\nconst handleJSONResponse = async (response) => {\n  try {\n    const data = await response.json()\n    return data;\n  } catch (error) {\n    return Promise.reject({\n      statusCode: response.status,\n      error\n    });\n  }\n}\n\nexport {\n  fetchData,\n  handleResponse,\n};\n","import { fetchData, handleResponse } from '../../services/service';\n\nconst getEvents = (queryParams) => {\n  let url = '/events';\n  if (queryParams) {\n    url = url + '?' + new URLSearchParams(queryParams);\n  }\n  return fetchData({\n    url,\n  }).then(data => handleResponse(data));\n};\n\nconst getEventDetail = (id) => {\n  return fetchData({\n    url: `/events/${id}`,\n  }).then(data => handleResponse(data));\n};\n\nexport {\n  getEventDetail,\n  getEvents\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Avatar, List, Typography } from 'antd';\n\nconst propTypes = {\n  listOfEmployees: PropTypes.arrayOf(\n    PropTypes.shape({\n      firstName: PropTypes.string,\n      id: PropTypes.number,\n      image: PropTypes.string,\n      lastName: PropTypes.string,\n    }),\n  ),\n};\n\nconst EmployeeList = ({\n  listOfEmployees,\n}) => {\n  return (\n    <List\n      header={\n        <Typography.Title level={5}>\n          List of Employees\n        </Typography.Title>\n      }\n      itemLayout=\"horizontal\"\n      dataSource={listOfEmployees}\n      rowKey={record => record.id}\n      renderItem={({\n        firstName, lastName, image, id,\n      }) => (\n        <List.Item>\n          <List.Item.Meta\n            avatar={<Avatar src={image} />}\n            title={`${firstName} ${lastName}`}\n            description={`Employee Id : ${id}`}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nEmployeeList.propTypes = propTypes;\nexport default EmployeeList;\n","import React from 'react';\nimport { Typography } from 'antd';\nimport PropTypes from 'prop-types';\nimport { ERROR_CODES_TEXT  } from '../../utils/AppConstants';\n\nconst propTypes = {\n  statusCode: PropTypes.number,\n};\n\nconst MessageList = ({ statusCode }) => {\n  const statusCodeReasons = ERROR_CODES_TEXT[statusCode] || [];\n  const genericErrorMsg = statusCodeReasons.length === 0\n    ? 'Error occured while connecting to server.'\n    : 'Error occured. This might be because of ';\n  const genericErrorNode = (\n    <Typography.Text key=\"generic\">\n      {genericErrorMsg}\n    </Typography.Text>\n  );\n  const reasonsNode = statusCodeReasons.map((text) => {\n    return (\n      <Typography.Text key={`message-${text}`}>\n        {` ${text} `}\n      </Typography.Text>\n    );\n  });\n\n  return [genericErrorNode, reasonsNode];\n};\n\nMessageList.propTypes = propTypes;\nexport default MessageList;\n","import React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Modal, Button, Space, Skeleton, message, Typography\n} from 'antd';\nimport EventListView from '../EventListView';\nimport { getEventDetail } from '../App/AppActions';\nimport EmployeeList from '../EmployeeList';\nimport { AppDispatchContext } from '../App';\nimport { HIDE_EVENT_DETAIL } from '../../utils/AppConstants';\nimport MessageList from '../MessageList';\n\nconst propTypes = {\n  eventId: PropTypes.number.isRequired,\n};\n\nconst initialState = {\n  hasError: false,\n  loading: true,\n  eventDetails: {\n    id: null,\n    position: {},\n    employees: []\n  }\n};\n\nconst EventDetailView = ({ eventId }) => {\n  const [state, updateState] = useState(initialState);\n  const dispatch = useContext(AppDispatchContext)\n\n  const { loading, eventDetails, hasError } = state;\n\n  const fetchEventDetail = async (id) => {\n    try {\n      const detailsData = await getEventDetail(id);\n      updateState({\n        hasError: false,\n        loading: false,\n        eventDetails: detailsData,\n      });\n    } catch ({ statusCode }) {\n      message.error(\n        <MessageList statusCode={statusCode} />,\n        5\n      );\n      updateState({\n        hasError: true,\n        loading: false,\n        eventDetails: initialState.eventDetails,\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchEventDetail(eventId);\n  }, [eventId]);;\n\n  const onModalClose = () => {\n    dispatch({\n      type: HIDE_EVENT_DETAIL,\n    });\n  };\n\n  return (\n    <Modal\n      visible\n      title=\"Event Detail View\"\n      centered\n      onCancel={onModalClose}\n      footer={[\n        <Button\n          key=\"close\"\n          shape=\"round\"\n          type=\"primary\"\n          onClick={onModalClose}\n        >\n          Close\n        </Button>\n      ]}\n    >\n      {loading\n        ? <Skeleton />\n        : (\n          <>\n            <Space\n              direction=\"vertical\"\n              size=\"large\"\n            />\n            {\n              !hasError &&\n              <EventListView\n                isModalView\n                events={[eventDetails]}\n              />\n            }\n            <Space\n              direction=\"vertical\"\n              size=\"large\"\n            />\n            <Space\n              direction=\"vertical\"\n              size=\"large\"\n            />\n            {\n              !hasError &&\n              <EmployeeList\n                listOfEmployees={eventDetails.employees}\n                loading={loading}\n              />\n            }\n            {\n              hasError &&\n              <Typography.Text type=\"danger\">\n                Error occur while fetching Event Details.\n              </Typography.Text>\n            }\n          </>\n        )\n      }\n    </Modal>\n  );\n}\n\nEventDetailView.propTypes = propTypes;\nexport default EventDetailView;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { InputNumber, DatePicker, Button, Space } from 'antd';\nimport './EventFilter.scss';\n\nconst propTypes = {\n  onFilterClick: PropTypes.func\n};\n\nconst initialState = {\n  startsAt: null,\n  endsAt: null,\n  pageSize: 10\n};\n\nconst { RangePicker } = DatePicker;\n\nconst EventFilter = ({ onFilterClick }) => {\n  const [filterState, updateFilter] = useState(initialState);\n\n  const { startsAt, endsAt, pageSize } = filterState;\n\n  const onRangeChange = (dateRanges) => {\n    const [start, end] = dateRanges;\n    const startAsIso = start.toISOString();\n    const endAsIso = end.toISOString();\n\n    updateFilter({\n      ...filterState,\n      startsAt: startAsIso,\n      endsAt: endAsIso\n    });\n  };\n\n  const onPageSizeChange = (size) => {\n    if (size) {\n      updateFilter({\n        ...filterState,\n        pageSize: size,\n      });\n    }\n  };\n\n  const onFilterBtnClick = () => {\n    onFilterClick(filterState);\n  };\n\n  return (\n    <div className=\"EventFilter\">\n      <Space direction=\"horizontal\" size=\"large\">\n      <div>\n        <Space direction=\"horizontal\" size=\"middle\">\n          <label>Date Range</label>\n          <RangePicker\n            onChange={onRangeChange}\n            showTime={{ use12Hours: true }}\n          />\n        </Space>\n      </div>\n      <div>\n        <Space direction=\"horizontal\" size=\"middle\">\n          <label>Page Size</label>\n          <InputNumber\n            keyboard={false}\n            min={1}\n            value={pageSize}\n            onChange={onPageSizeChange}\n          />\n        </Space>\n      </div>\n      <div>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          onClick={onFilterBtnClick}\n          disabled={!(startsAt && endsAt)}\n        >\n          Filter Events\n        </Button>\n        </div>\n      </Space>\n    </div>\n  )\n};\n\nEventFilter.propTypes = propTypes;\nexport default EventFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Typography } from 'antd';\nimport './ListViewFooter.scss'\n\nconst propTypes = {\n  onLoadMoreClick: PropTypes.func,\n  isLastPage: PropTypes.bool,\n  footerText: PropTypes.string,\n};\n\nconst ListViewFooter = ({\n  onLoadMoreClick, isLastPage, footerText\n}) => (\n  <div className=\"ListViewFooter\">\n    <Button\n      shape=\"round\"\n      type=\"primary\"\n      onClick={onLoadMoreClick}\n      disabled={isLastPage}\n    >\n      Load More\n    </Button>\n    <div className=\"ListViewFooter__textwrapper\">\n      <Typography.Text strong>{footerText}</Typography.Text>\n    </div>\n  </div>\n);\n\nListViewFooter.propTypes = propTypes;\nexport default ListViewFooter;\n","import {\n  FETCH_EVENTS_SUCCESS,\n  SHOW_EVENT_DETAIL,\n  HIDE_EVENT_DETAIL,\n  UPDATE_DATE_RANGE,\n} from \"../../utils/AppConstants\";\n\nconst addEventsToState = (state, payload) => {\n  const {\n    data: {\n      items = [],\n      pagination: {\n        offset, count\n      },\n    },\n    appendEvents\n  } = payload;\n  const { events } = state;\n  return {\n    ...state,\n    events: appendEvents ? [...events, ...items] : items,\n    currentPage: offset + 1,\n    totalItemCount: count\n  };\n}\n\nconst showEventDetail = (state, payload) => {\n  const { eventId } = payload;\n  return {\n    ...state,\n    eventDetail: {\n      eventId,\n      showDetails: true\n    },\n  };\n}\n\nconst hideEventDetail = (state) => {\n  return {\n    ...state,\n    eventDetail: {\n      showDetails: false\n    },\n  };\n};\n\nconst updateDateRange = (state, payload) => {\n  const { data } = payload;\n  return {\n    ...state,\n    ...data,\n  };\n};\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch(type) {\n    case FETCH_EVENTS_SUCCESS:\n      return addEventsToState(state, payload);\n    case SHOW_EVENT_DETAIL:\n      return showEventDetail(state, payload);\n    case HIDE_EVENT_DETAIL:\n      return hideEventDetail(state);\n    case UPDATE_DATE_RANGE:\n      return updateDateRange(state, payload);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useReducer, useEffect, useState } from 'react';\nimport {\n  Layout, message, PageHeader,\n} from 'antd';\nimport EventDetailView from '../EventDetailView';\nimport EventListView from '../EventListView';\nimport EventFilter from '../EventFilter';\nimport {\n  FETCH_EVENTS_SUCCESS, UPDATE_DATE_RANGE\n} from '../../utils/AppConstants';\nimport ListViewFooter from '../ListViewFooter';\nimport MessageList from '../MessageList';\nimport { getEvents } from './AppActions';\nimport reducer from './reducer';\nimport './App.scss';\n\nconst { Content } = Layout;\n\nconst initialState = {\n  eventDetail: {\n    showDetails: false,\n    eventId: null,\n  },\n  events: [],\n  currentPage: 1,\n  pageSize: 10,\n  totalItemCount: 10,\n  startsAt: null,\n  endsAt: null,\n};\n\nconst AppDispatchContext = React.createContext(null);\n\nconst App = () => {\n  const [appState, dispatch] = useReducer(reducer, initialState);\n  const [isEventFetchInProgress, updateEventFetchStatus] = useState(true);\n  const {\n    events,\n    eventDetail: { showDetails, eventId },\n    pageSize,\n    currentPage,\n    startsAt,\n    endsAt,\n  } = appState;\n\n  const eventsInView = events.length;\n\n  const fetchListOfEvents = async (queryParams, appendEvents = false) => {\n    try {\n      updateEventFetchStatus(true);\n      const eventList = await getEvents(queryParams);\n      dispatch({\n        type: FETCH_EVENTS_SUCCESS,\n        payload: {\n          appendEvents,\n          data: eventList,\n        },\n      });\n    } catch ({ statusCode }) {\n      message.error(\n        <MessageList statusCode={statusCode} />,\n        5,\n      );\n    } finally {\n      updateEventFetchStatus(false);\n    }\n  };\n\n  useEffect(() => {\n    let queryParams = {\n      limit: pageSize,\n    };\n\n    if (startsAt && endsAt) {\n      queryParams = { ...queryParams, startsAt, endsAt };\n    }\n\n    fetchListOfEvents(queryParams);\n  }, [startsAt, endsAt, pageSize]);\n\n  const onLoadMoreClick = () => {\n    let queryParams = {\n      limit: pageSize,\n      offset: currentPage,\n    };\n    if (startsAt && endsAt) {\n      queryParams = { ...queryParams, startsAt, endsAt };\n    }\n\n    fetchListOfEvents(queryParams, true);\n  };\n\n  const onFilterClick = (filterParams) => {\n    if (\n      filterParams.startsAt !== startsAt\n      || filterParams.endsAt !== endsAt\n      || filterParams.pageSize !== pageSize\n    ) {\n      dispatch({\n        type: UPDATE_DATE_RANGE,\n        payload: { data: filterParams },\n      });\n    }\n  };\n\n  const footerText = `Showing ${eventsInView} Events`;\n\n  return (\n    <Layout>\n      <PageHeader\n        className=\"App__pageheader\"\n        title=\"Event Viewer\"\n        ghost={false}\n        backIcon={false}\n      />\n      <AppDispatchContext.Provider value={dispatch}>\n        <Content>\n          {\n            showDetails ? <EventDetailView eventId={eventId} /> : null\n          }\n          <EventFilter\n            onFilterClick={onFilterClick}\n          />\n          <EventListView\n            events={events}\n            isLoading={isEventFetchInProgress}\n          />\n          {\n            isEventFetchInProgress || eventsInView === 0\n              ? null\n              : (\n                <ListViewFooter\n                  footerText={footerText}\n                  onLoadMoreClick={onLoadMoreClick}\n                />\n              )\n          }\n        </Content>\n      </AppDispatchContext.Provider>\n    </Layout>\n  );\n};\n\nexport {\n  App,\n  AppDispatchContext,\n};\n","import ErrorBoundary from '../../components/ErrorBoundary';\nimport { App } from '../../components/App';\n\nconst AppContainer = () => {\n  return (\n    <div className=\"AppContainer\">\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </div>\n  );\n}\n\nexport default AppContainer;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './containers/AppContainer';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}